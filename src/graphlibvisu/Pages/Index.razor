@page "/"
@using Microsoft.AspNetCore.WebUtilities
@using graphlibvisu.Data
@inject FileSystemLoader fs_loader
@inject IJSRuntime JS
@inject NavigationManager NavManager


<h1>GRAPHLIB - INTERACTIVE VISUALISATION</h1>



<div class="alchemy" id="alchemy"></div>


<table>
    <tr>
        <th><a class="btn btn-primary" @onclick="greset" role="button">RESET</a></th>
        <th><a class="btn btn-primary" @onclick="breitensuche" role="button">BREITENSUCHE</a></th>
        <th><a class="btn btn-primary" @onclick="cluster" role="button">CLUSTER</a></th>
    </tr>
</table>

<h1>Load example graphs</h1>

<p>Please select a graph to load from the list below</p>

@if (graphs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td>
                <select name="graphtoload" id="graphtoload" onchange="set_graph_file_param()">
                @foreach (var g in graphs)
                {
                     <option value="@g.filename">@g.filename</option>
                        //<a class="btn btn-primary" onclick="set_graph_file_param('@g.filename'); window.location.reload()" role="button">@g.filename</a>
                    
                }
                </select>
                </td>
                <td>
                    <a class="btn btn-primary" onclick="window.location.reload()" role="button" >LOAD</a>
                </td>
            </tr>
        </tbody>
    </table>
}



@code {
    private GraphLoadingItem[] graphs;

    protected override async Task OnInitializedAsync()
    {
        graphs = await FileSystemLoader.GetGraphLoadingItem();


    }


    protected void greset()
    {
        FileSystemLoader.ApplyEffectOnGraph(FileSystemLoader.ALOGORITHM.RESET);
        JS.InvokeVoidAsync("create_alchemy_visualisation", FileSystemLoader.CurrentGraphToJSONSTring());
    }

    protected void breitensuche()
    {
        FileSystemLoader.ApplyEffectOnGraph(FileSystemLoader.ALOGORITHM.BREITENSUCHE);
        JS.InvokeVoidAsync("create_alchemy_visualisation", FileSystemLoader.CurrentGraphToJSONSTring());
    }

    protected void cluster()
    {
        FileSystemLoader.ApplyEffectOnGraph(FileSystemLoader.ALOGORITHM.CLUSTER);
        JS.InvokeVoidAsync("create_alchemy_visualisation", FileSystemLoader.CurrentGraphToJSONSTring());
    }



    protected void load_graph(string _fs)
    {
        FileSystemLoader.LoadGraphToJSONString(_fs);
        string json_graph = FileSystemLoader.CurrentGraphToJSONSTring();
        JS.InvokeVoidAsync("create_alchemy_visualisation", json_graph);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("init_alchemy");
        await JS.InvokeVoidAsync("set_graph_select_combobox");


        string? _fs = null;
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("fs", out var _initialCount))
        {
            _fs = _initialCount;
        }



        if (_fs == null)
        {
            _fs = "Graph1.txt";
        }
        GraphLoadingItem[] fss = await FileSystemLoader.GetGraphLoadingItem();
        bool is_in = false;
        foreach (GraphLoadingItem it in fss)
        {
            if (it.filename == _fs)
            {
                is_in = true;
                break;
            }
        }

        if (!is_in)
        {
            await JS.InvokeVoidAsync("show_error", "invalid load file:" + _fs);
            return;
        }

        load_graph(_fs);


    }

}







